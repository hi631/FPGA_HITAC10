//
// http://bitcraft.web.fc2.com/embedded/hitac10/emulatehitac10.html より抜粋
// コメントの一部を追加/変更
//
ＯＭＬテープを読み出し、手動逆アセンブラで展開したもの。
メモリ上には、先頭１番地から、以下の１６ワードの
ＩＰＬが書かれているものとする。０番地は実際書く必要は無い。

以下はＩＰＬ

ADDR  DATA		LABEL	命令	モード　アドレス、コメント
0000                    	ORG	0
0000  0000              TEMP:	DC		0 // ワークエリア　(サム値)
0001  0001              	DC		1 // 最初は１で、ＯＭＬの最初を読んで、００１０に書き換えられる
0002  7024              LOOP:	STR
0003  8804              	SLL		4
0004  3800              	ST		TEMP
0005  7021              	KTR
0006  4005              	B		*-1
0007  7032              	RTR	,C
0008  880C              	SLL		12
0009  800C              	SRL		12
000A  3000              	O		TEMP
000B  6841              	KNC
000C  4002              	B		LOOP
000D  3C01              	ST	,I	1
000E  5001              	KCT		1
000F  6842              	KZA
0010  4002              	B		LOOP
0011			// ＯＭＬの最初の約半分を読むと、コード０となり、
			ＫＺＡで、スキップして、LOOP にブランチしなくなり
			ＩＰＬから抜け出て、ＯＭＬに制御が移る仕組みである。


ＩＰＬの０ｘ０００Ｆ番地でスキップして、０ｘ００１１番地へと進み、
ここから０ｘ９Ｅ番地に飛ぶ。

最初、いくつかのフィード（ＮＵＬＬ）が必要
ＯＭＬテープは、４文字で１６ビットのデータとなるような並びになっている。
ＯＭＬテープの有効な（フィードでない）０ｘ２９０バイト読むと、フィード部分となる。
そのデータが０なのでスキップして、０ｘ００１１番地へと進む。
ここから０ｘ９Ｅ番地に飛び、付加命令機構のエミュレートソフトの格納を行う。
009E --- 00A9 で付加命令の有無をチェック。
00AC --- 00AE で付加命令機構がなければ、エミュレート部分を追加でロードする。

ADDR	DATA	命令	モード　アドレス、コメント
	0000				フィード（ＮＵＬＬ）14バイト
         :
0010	0010				この００１０は、１番地に上書きされる。
0011	409E	B		9E	メモリ調査に飛んだ後は、読み込みデータのワークに使用される
0012	4411	B	,I	11	
0013	4072	B		72	
0014	0813	L		13	
0015	6F00	HLT			
0016	4413	B	,I	13	
//
0017	104A	A		4A	ACに (4A)=0805 を加算
//
0018	1017	A		17	ACに (17)=104A を加算
0019	205C	N		5C	ACに (5C)=002F をand
001A	3853	ST		53	読み込んだ文字を16進データに変換した結果
001B	0811	L		11	
001C	8804	SLL		4	
001D	3053	O		53	
001E	3811	ST		11	11番地を4bit左シフトして加算、11番地に格納
001F	4022	B		22	
//
// ＯＭＬフォーマット(付加命令機構ソフトエミュ等)のロード開始
// テープは xxxx@ の5文字構成、xxxxは16ビットのデータ、 @以外にはK,I,Hが使われている。
//
0020	8000	SRL		10	ACクリア
0021	3800	ST		0	０番地へ格納(0クリア)
//
// 読み取りループ
0022	4849	BAL		49	ACへ一文字読み取り(0x2F引かれ、"0"=01,"1"=02..."F"=17)
0023	6842	KZA			AC==0ならスキップPC+2
0024	4028	B		28	
// コメント( / **** /)の読み飛ばし
0025	4849	BAL		49	ACへ一文字読み取り
0026	6842	KZA			
	4025	B		25	AC!=0の場合(/以外)は、25番地へループ
// 
0028	6866	KPA,KNA			
	4022	B		22	AC==マイナス(入力文字= 0x00 - 0x2F)の場合、読み直し
	1867	S		67	ACから0x1Cを引く(計4B引かれる)
	6846	KMA,KZA			AC<=0の場合スキップPC+2
	4022	B		22	"0"以下なので、読み直し
	1866	S		66	ACから0x11を引く(0xFFEF) 
	6864	KPA			
	4018	B		18	ACの値(0-9)を格納して、読み直し(22番地)へ
// 16進の A-F の場合
0030	185B	S		5B	ACから6(30番地)を引く
	6864	KPA			
	4022	B		22	"9"以上。"A"以下なので、読み直し
0033	6862	KNA			
	4089	B		89	@を読んだので格納処理へ
	1A5B	S ,I	5B	ACから6(30番地)を引く ????
0036	6866	KPA,KNA			"F"以上ならスキップPC+2
	4017	B		17	ACの値(A-F)を格納して、読み直し(22番地)へ
// コマンド分岐処理
0038	8802	SLL		2	以下 G,H(2=5D),I(3=61),J,K(5=69) へジャンプ
	1068	A		68	0x4055 B 55
	383C	ST		3C	ジャンプテーブルとして使用
	0811	L		11	読み出した16bitのデータ
//
// 入力テープパリティチェック
//   ＯＭＬテープはパリティ付
003C	0001	?			戻り番地格納
003D	3853	ST		53	ACにある読み取りデータを格納　53は一旦壊れる
003E	8801	SLL		1	ACを左に1bitシフト、AC15がCARに入る
003F	6862	KNA			ACが0以外でスキップPC+2
0040	4044	B		44	AC==0になったら44へ
0041	6861	KZC			
0042	2820	X		20	ACと0x8000をxorする
0043	403E	B		3E	
//
0044	0853	L		53	ACに読み取りデータを復帰
0045	6841	KNC			パリティエラー(CAR==1)の場合スキップPC+2
0046	503C	KCT		3C	エラーなしだと戻り番地を+1
0047	443C	B	,I	3C	エラー無しで56番地、有る場合は55番地(HLT)に
0048	7EFF	?			ソフト格納番地(最初は0x0F00)
// 
// 一文字読み取り
0049	0001	?			戻り(23)を書き込み4A番地から実行
004A	0805	L		5	
004B	3851	ST		51	KTR  7021　　ＩＰＬからコピー
004C	0802	L		2	
004D	3850	ST		50	STR  7025　　ＩＰＬからコピー
004E	0807	L		7	
004F	3853	ST		53	RTR ,C 7032　ＩＰＬからコピー　,CでACをクリアすると想定
0050	(7025)	(STR)			テープリーダー起動　(元は0001)
0051	(7021)	(KTR)			データ有り(フラグ==1)ならスキップPC+2 (元は0001)
0052	4051	B		51	データーが来るまでループ
0053	(7032)	(RTR,C)			ACをクリア後にデーターを読み取る(元は0001)
0054	483C	BAL		3C	3Cをサブルーチンコール、エラー無しなら56番地に戻ってくる
0055	6F00	HLT			パリティーエラーが発生したら停止
0056	2060	N		60	ACと0x7Fをand
0057	185C	S		5C	ACから0x2Fを引く
0058	4449	B	,I	49	呼びだし元+1(23)に戻る
//
// cmd = G ソフト格納番地を指定 (index 4  1)　
0059	3848	ST		48	番地を入力した値に設定
005A	4022	B		22	
005B	0006	?			定数(0x06)
005C	002F	?			定数(0x2F)
// cmd = H 停止 (index 8  2)　
005D	8810	SLL		10	
005E	6F00	HLT			OML停止
005F	4411	B	,I	11	(11)=0300へ飛ぶ?
0060	007F	?			60番地
// cmd = I サムチェックの確認 (index 0xc  3)
0061	1800	S		0	AC=読出し値 (0)=サム値
	6842	KZA			
	6F00	HLT			不一致の場合は停止
	4020	B		20	読出しを再開
// cmd = J 読み出した値にジャンプ (index 0x10  4)
0065	4411	B	,I	11	
0066	FFEF	?			
0067	001C	?			
0068	4055	B		55	
// cmd = K 格納を指定回数スキップ (index 0x14 5)
0069	8810	SLL		10	AC=0
	1811	S		11	11番地の符号を反転
	3811	ST		11	(11)=0-(11)
	8810	SLL		10	AC=0
006D	3C48	S	,I	48	
	5048	KCT		48	格納番地(48)++
	5011	KCT		11	(11)++
	406D	B		6D	指定回数繰り返し
	4022	B		22	
//
// 割り込み処理
0072	3898	ST		98	
	088F	L		8F	付加命令有りで、０ｘ８０００、無し０ｘ７ＦＦＦ
0074	6864	KPA			
	F099	STE		99	?	
0076	6900	LCAR			
	3897	ST		97	
0078	68E8	KPEC,R			
	4C90	BAL	,I	90	
007A	68E4	KMEC,R			
	4C91	BAL	,I	91	
007C	4C92	BAL	,I	92	
007D	68E2	KAEC,R			
007E	4C93	BAL	,I	93	
007F	68E1	KOEC,R			
0080	4C94	BAL	,I	94	80番地
0081	0897	L		97	
	6A00	SCAR			
	088F	L		8F	
	6864	KPA			
	C099	LE		99	
	0898	L		98	
	6C00	SIM			
0088	4400	B	,I	0	
// cmd = @ データ格納処理
0089	0811	L		11	読み込んだ16進数値
008A	3C48	ST	,I	48	指定番地に格納
	1000	A		0	
008C	3800	ST		0	SUMか
	5048	KCT		48	番地をインクリメント
	4022	B		33	
//
008F	7FFF	?			
	0013	?			90番地
	0013	?			
	0011	?			
	0013	?			
0094	7EFF	?			--->0013
	0202	?			
0096	7EFF	?			
	1000	A		0	?	ＣＡＲＲＹ退避
0098	0100	?			ＡＣ退避
	0013	?			
009A	0001	?			
	0001	?			
	0001	?			
	0001	?			

//
// OML 実行開始
009E	0813	L		13	ＯＭＬをロードした(０ｘ２９２読んだ)後、ここから開始
	3801	ST		1	割り込み処理アドレスへのジャンプ(B 72)を設定
00A0	0C96	L	,I	96	実装されていないとAdr.Errフラグをセット、0x7Eff - 6EFF - 5EFF と順にチェック 
	68C2	KAEC			Adr.Err有り、エラー処理PC+2へ
	40A9	B		A9	       無し、次のステップに
	0896	L		96	メモリ実装なしでエラーの場合	
00A4	1897	S		97	0x1000　４Ｋワード単位で下げる
	3896	ST		96	
00A6	3848	ST		48	
	3894	ST		94	
00A8	40A0	B		A0	切り下げたアドレスで再チェックへ
//
00A9	5048	KCT		48	(48)++ チェック結果を+1　４KW実装なら0x0F00になる
	5094	KCT		94	(94)++ 
	C898	LD		98	ACを復旧(何処で退避したのだろうか)
00AC	68E1	KOEC,R			ここで、付加命令機構の有無をチェック　付いていた場合PC+2へ
00AD	4020	B		20	無しの場合、ソフトをテープからロード
//
// 付加命令機構付きの場合
00AE	1096	A		96	0x100
00AF	3896	ST		96	result is 0x1FFF
00B0	F094	STE		94	B0番地
00B1	508F	KCT		8F	
00B2	6F00	HLT			
00B3	4020	B		20	
	0000				
	0000
	0000

テープはここで、フィードとなる（ＮＵＬＬ）その後、以下のアスキー文字コードが続く。
以下はプログラムだが、ロードされるアドレスは、使うＨＩＴＡＣ１０に実装されているメモリの
最後の０ｘ１００ワードの先頭からされる。ＸＩＬＩＮＸのエミュレータ-では、メモリを
４Ｋ語実装しているので、メモリチェックでエラーで 0x0F00 ワードアドレスからロードされる。
(実バイトアドレスは、０ｘ１Ｅ００番地。)
次のコマンドが使用されている。
xxxx@ 格納指定番地にxxxxを書込む(初期指定番地はメモリチェックで作成)
xxxxG 格納指定番地をxxxxに再設定
xxxxH 停止
xxxxI 読み出した値にジャンプ
xxxxK 格納を指定回数スキップ

以下のプログラムは、付加命令のソフトエミュレートデータである。
0000@0800@1B2E@3B31@0F31@3B30@2334@3B32@
0B30@8806@6844@431D@0B31@2333@3332@3B2F@
6861@0F2F@3B2F@0B30@6864@4319@800B@132C@
431B@800B@131F@3B1C@
0001K
8010@430E@430C@4371@4381@4376@4386@4340@
433D@4343@4352@43BE@43DC@436B@4368@432D@
43F6@0001@
0001K
0001K
0001K
0001K
FE00@01FF@000F@0010@8000@43F6@436E@7FFF@
0001K
43F6@0F2F@3898@532F@0F2F@3899@4700@0F2F@
3B30@532F@0F2F@1099@3899@6900@1330@6861@
4365@1098@3898@6900@3897@4700@0F2F@3B30@
532F@0899@1F2F@3899@0898@6861@435D@1B30@
434E@1B2E@6841@435B@1B30@3898@0B2E@3897@
4700@1098@3898@4362@0898@3F2F@532F@0899@
3F2F@4700@0B2F@3899@4700@4B9B@4BB2@532F@
4372@4700@4B9B@0898@2337@3B31@4BB2@3331@
3898@532F@437A@8810@4363@4B9B@4BA5@532F@
4382@4700@8010@3B32@4B9B@0898@2337@3B31@
4BA5@0898@2B31@3332@3B32@532F@438C@0B32@
800F@3897@0898@233A@3331@3898@4700@0000@
0B2F@2335@3B2F@6862@1B36@1B2F@1B2F@3B2F@
479B@0000@0899@8801@3899@6900@3B30@0898@
8801@3330@3898@6900@3897@47A5@0000@0898@
880F@3B30@0899@8001@3330@3899@0898@8001@
3898@47B2@8810@3897@3898@0BFA@3BFB@0F2F@
3B2F@6A00@8001@3B2F@0898@6861@1099@3898@
6900@880F@3B3B@0898@880F@132F@3B2F@0898@
8001@133B@3898@0B2F@53FB@43C5@3899@4700@
0898@1F2F@6841@43F3@0BFA@3BFB@4BA5@0898@
1F2F@6841@43EC@3B32@0897@6862@43EE@0B32@
3898@5099@53FB@43E2@8810@3897@4700@0B2E@
3897@4700@0BF9@3813@4014@0081@FFF0@0000@
CCC0I
0300H

逆アセンブル（一部）エミュレータでは、０ｘＦ００番地から
ロードされている。

0100	0000	
0101	0800	L		0
0102	1B2E	S		12E
0103	3B31	ST		131
0104	0F31	L	,I	131
0105	3B30	ST		130
0106	2334	N		134	// 01FF
0107	3B32	ST		132
0108	0B30	L		130
0109	8806	SLL		6
010A	6844	KMA			// ,I
010B	431D	B		11D
010C	0B31	L		131
010D	2333	N		133	// FE00
010E	3332	O		132
010F	3B2F	ST		12F
0110	6861	KZC
0111	0F2F	L	,I	12F
0112	3B2F	ST		12F
0113	0B30	L		130
0114	6864	KPA
0115	4319	B		119
0116	800B	SRL		B
0117	132C	A		12C
0118	431B	B		11B
0119	800B	SRL		B
011A	131F	A		11F
011B	3B1C	ST		11C
011C	0000
011D	8010	L		10
011E	430E	B		10E
011F	430C	B		10C
0120	4371	B		171
0121	4381	B		181
0122	4376	B		176
0123	4486	B		186
0124	4340	B		140
0125	433D	B		13D
0126	4343	B		143
0127	4352	B		152
0128	43BE	B		1BE
0129	43DC	B		1DC
012A	436B	B		16B
012B	4368	B		168
012C	432D	B		12D
012D	43F6	B		1F6
012E	0001
012F	0000
0130	0000
0131	0000
0132	0000
0133	FE00
0134	01FF
0135	000F
0136	0010
0137	8000

// MASS
